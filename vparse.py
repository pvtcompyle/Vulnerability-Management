#!/usr/bin/python3
#
# Name: vparse
# Version 3.0
# Created by: pvtcompyle
# Desc: Used to parse and analyze Nessus vulnerability scans
# Updated: 13-Dec-2019

import sys
from colorama import Style, Fore, Back, init
import time
import pandas as pd
import re
import os
import glob
import numpy as np
import shutil

def getcsv():
    extension = 'csv'
    files = glob.glob('*.{}'.format(extension))
    return(files)

def getDataFrame(file):
    data_frame = pd.read_csv(file, sep=',')
    return(data_frame)

def parsetrash(pfile):
    data = pd.read_csv(pfile, sep=',')
    data = data[data['CVSS'] > 3.9]
    data = data.sort_values(['Host', 'CVSS'], ascending=[True, False])
    data.to_csv(pfile, sep=',', index=False)

def seperatehosts(file, dir):
    data_frame = pd.read_csv(file)
    hosts = data_frame['Host'].unique()
    hostcount = countinstance(file, 'Host')
    tick=0
    printProgressBar(0, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    for h in hosts:
        tick += 1
        current = int((tick/hostcount)*100)
        current = str(current)+'%'
        result = data_frame[data_frame['Host'].str.match(h)]
        hostfile = h + '.csv'
        hostfile = os.path.join(dir, hostfile)
        result.to_csv(hostfile, sep=',', index=False)
        # parsetrash(hostfile)
        # Update Progress Bar
        printProgressBar(tick, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    print(Style.RESET_ALL)
    print(Fore.GREEN + 'Hosts have been seperated into individual files.' + Fore.RESET)
    return(hosts)
    #end of original function

def countinstance(file, field):
    import pandas as pd
    data_frame = pd.read_csv(file)
    hosts = data_frame[field].unique()
    hostcount = len(hosts)
    return (hostcount)

def getlastmonth():
    import datetime
    today=datetime.date.today()
    month = int(today.strftime("%m"))-1
    month = str(month).zfill(2)
    scandate= ''.join([str(today.strftime("%Y-")),month])
    return(scandate)

def summary(data_frame,summaryfile):
    hostlist = data_frame['Host'].unique()
    hostcount = len(hostlist)
    hostSummary = []
    tick=0
    print(Fore.BLUE + '\nCalculating severities and risk score ...' + Fore.RESET)
    printProgressBar(0, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    # Get Criticalities and calculate risk scores
    for h in hostlist:
        tick += 1
        hostresult = data_frame[data_frame['Host'].str.match(h)]
        critresult = hostresult[hostresult['Risk'].str.match('Critical')]
        count_crit = critresult['Risk'].count()
        critresult = hostresult[hostresult['Risk'].str.match('High')]
        count_high = critresult['Risk'].count()
        critresult = hostresult[hostresult['Risk'].str.match('Medium')]
        count_med = critresult['Risk'].count()
        riskScore = ((count_crit)+(count_high/10)+(count_med/100))
        hostSummary.append([h, count_crit, count_high, count_med,riskScore])
        printProgressBar(tick, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    print(Fore.GREEN + 'Calculations complete.' + Fore.RESET)
    # Write summary to file
    print(Fore.BLUE + '\nWriting summary to file ...' + Fore.RESET)
    tick = 0
    printProgressBar(0, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    for h in hostSummary:
        tick += 1
        pd.DataFrame(hostSummary).to_csv(summaryfile, sep=',', header=['Host','Critical','High','Medium','RiskScore'], index=False)
        printProgressBar(tick, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    hostSummary = getDataFrame(summaryfile)
    print(Fore.BLUE + '\nSorting by risk score and rewriting file ... ' + Fore.RESET)
    hostSummary = hostSummary.sort_values(by=['RiskScore'], ascending=False)
    tick = 0
    printProgressBar(0, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    for h in hostSummary:
        hostcount = len(hostSummary)
        tick += 1
        pd.DataFrame(hostSummary).to_csv(summaryfile, sep=',', index=False)
        printProgressBar(tick, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)

def showlist(array):
    for e in array:
        print('\t', e)

def write_to_file(array, outfile):
    try:
        pd.DataFrame(array).to_csv(outfile, index=False, header=None)
    except:
        print(Fore.RED + 'Could not write to ',outfile, ': Access Denied.' + Style.RESET_ALL)
        if not input('Try again? (y/n)') == 'y': return
        write_to_file(array, outfile)
        
def printProgressBar (iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = 'â–ˆ'):

    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
    """
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = '\r')
    # Print New Line on Complete
    if iteration == total: 
        print()

def correctDate():
    value= input('Please enter the correct date: ')
    while not value.isnumeric():
        print(Fore.RED + 'Incorrect date format!' + Style.RESET_ALL)
        value = input('Please enter correct date (ex. 201906): ')
    return str(value)

def merge_workstations(files, combined):
    workstations = []
    for f in files:
        if "Workstation" in f:
            workstations.append(f)

    df1 = pd.read_csv(workstations[0])
    df2 = pd.read_csv(workstations[1])
    df_combined = pd.concat([df1,df2], sort=False)
    df_combined.to_csv(combined)
    os.remove(workstations[0])
    os.remove(workstations[1])

def main():
    ################
    ## Initialize ##
    ################

    month = time.strftime('%m')
    month = int(month)-1
    if month<1:
        month = 12
        year = time.strftime('%Y')
        year = int(year)-1
        scandate = str(year)+(str(month))
    else:
        scandate = time.strftime('%Y')+str(month)
    check=""
    cwd = os.getcwd()
    vuln_count=0
    system_count=0
    avg_cvss=0

    # Create new folder for output files
    path = "results"
    hosts_path = 'results/hosts'

    if not os.path.exists(path):
        os.mkdir(path)
        os.mkdir(hosts_path)
    else:
        shutil.rmtree(path)
        os.mkdir(path)
        os.mkdir(hosts_path)
    
    # Get scandate 
    while check!="y":
        check=input('Is this the correct scan date: ' + Fore.BLUE + str(scandate) + Style.RESET_ALL + '? (y/n): ')
        if check!='y':
            scandate = correctDate()
    summary_file = scandate + '_Summary.csv'

    #################
    # Begin Program #
    #################
    
    # List csv in CWD
    files = getcsv()
    print(Fore.BLUE + '\nList of csv files in CWD' + Fore.RESET)
    for f in files:
        print('\t',f)

    # Show new file names and prepare to rename
    print(Fore.BLUE + '\nRename these files as:' + Fore.RESET)
    
    for f in files:
        print('\t',scandate+'_'+f[:-11]+'.csv')
    ans = input('Continue? (y/n): ')
    if (ans != 'y') and (ans != 'Y'):
        print('Rename aborted ...')
    else:
        start_time = time.time()
        print('\nProcessing ...')
        # Copy files to results dir
        for f in files:
            shutil.copy (f, path)
        # Rename files in results dir
        os.chdir(path)
        for f in files:
            nf = scandate+'_'+f[:-11]+'.csv'
            print('Renaming ' + Fore.BLUE + f + Fore.RESET + ' to '+ Fore.CYAN + nf + Fore.RESET)
            try:
                os.rename(f, nf)
            except:
                os.remove(nf)
                os.rename(f, nf)

    print(Fore.BLUE + '\nVerifying rename ...' + Fore.RESET)
    verify_rename = getcsv()
    for v in verify_rename:
        print('\t',v)
    

    # Merge Workstations into one file
    combined_workstations = scandate + '_Workstation_Scan.csv'
    merge_workstations(verify_rename,combined_workstations)

    files = getcsv()
    for f in files:
        parsetrash(f)
        summary_file = 'Summary_'+f
        summary_df = getDataFrame(f)
        summary(summary_df, summary_file)
        seperatehosts(f, 'hosts')


    # Return to starting Dir
    os.chdir(cwd)

    # Generate runtime summary
    print(Fore.BLUE + '\nGenerating Runtime summary ...' + Fore.RESET)
    files = getcsv()
    for f in files:
        df = getDataFrame(f)
        vuln_count += len(df.index)
        system_count += df['Host'].nunique()
        avg_cvss += df.CVSS.mean()
    avg_cvss = round(avg_cvss / len(files), 2)

    time2finish = round(time.time() - start_time, 2)
    print("\nExecution time (seconds): %s" % time2finish)
    print('Vulnerability Count: ', vuln_count)
    print ('Devices Scanned:     ', system_count)
    print ('Avgergae CVSS:       ', avg_cvss)
    runtime_summary = (['scanDate', 'runTime', 'vulnCount', 'deviceCount', 'avgCVSS'], [scandate, time2finish, vuln_count, system_count, avg_cvss])
    rt_sum_file = 'Summary_' + scandate + '_Execution.csv'
    os.chdir(path)
    write_to_file(runtime_summary,rt_sum_file)
    os.chdir(cwd)

main()

