# Version 2.
# Created by: Thunder Sargent
#
# Modifications:
# -colorized output for readability
# -tweaked criticality weights (Critical*20, High*2, Medium/2)

from libs.vulm import *
import sys
from colorama import Style, Fore, Back, init
import os
import time

################
## Initialize ##
################
resultsdir = 'results'
hostsdir = 'results\\hosts'

# Setup working directory and get a list of all csv's in the directory
dir=os.getcwd()
os.chdir(dir)
csvlist = getcsv()
scandate = (getlastmonth())
consolidatedfile = scandate + "_ScanResults.csv"
consolidatedfile = os.path.join(resultsdir, consolidatedfile)
summaryfile = 'results\\' + scandate + '_Summary.csv'

###########
## Start ##
###########
init(convert=True)
print(Fore.CYAN + 'The following files have been found:' + Style.RESET_ALL)
for f in csvlist:
    print(Fore.CYAN + Style.DIM + '\t', f + Style.RESET_ALL)
a= print(Fore.RED + "Continue processing these files? (y/n): ")
a= input()
print(Style.RESET_ALL)
# if not input(Fore.CYAN + "Continue processing these files? (y/n): " + Style.RESET_ALL).lower().strip()[:1] == "y": sys.exit(1)
if not a.lower().strip()[:1] == "y": sys.exit(1)
# Create output directories to store output files 
try:
    os.mkdir(resultsdir)
except Exception:
    pass
try:
    os.mkdir('results\\hosts')
except Exception:
    pass

startTime = time.time()
print(Fore.CYAN + '\nConsolidating files ...' + Style.RESET_ALL)
consolidatescans(csvlist, scandate, resultsdir, consolidatedfile)

print(Fore.CYAN + '\nSeperating hosts into individual files ...' + Style.RESET_ALL)
hosts = seperatehosts(consolidatedfile, dir)
print(Fore.CYAN + 'Parsing the trash from individual host files ...' + Style.RESET_ALL)

cons_data_frame = getDataFrame(consolidatedfile)
print(Fore.CYAN + '\nGenerating summary report ...' + Style.RESET_ALL)
summary(cons_data_frame, summaryfile)
print(Fore.GREEN + '\nSummary report complete. ' + Style.RESET_ALL)
print(Fore.CYAN + Style.DIM + '\nTotal hosts scanned: ' + Style.RESET_ALL, countinstance(consolidatedfile, 'Host'))
print(Fore.CYAN + Style.DIM + 'Total detections found: ' + Style.RESET_ALL, len(cons_data_frame))
print(Fore.CYAN + Style.DIM + "Average CVSS score: " + Style.RESET_ALL, round(cons_data_frame['CVSS'].mean(), 2))
ex_time=time.time()-startTime
print(Fore.CYAN + 'Execution Time: ', Style.RESET_ALL + '{0:0.1f} seconds'.format(time.time() - startTime))

input("\nPress Enter to continue...")