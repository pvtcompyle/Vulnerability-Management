from colorama import Style, Fore
import pandas as pd
import re
import os
import glob
import numpy as np

def getcsv():
    extension = 'csv'
    files = glob.glob('*.{}'.format(extension))
    return(files)
def consolidatescans(files, scandate, resultsdir, outfile):
    hostcount=len(files)
    tick=0
    printProgressBar(0, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    for f in files:
        tick += 1
        scantype = re.search('(.*?)_Scan', f).group(1)
        data = pd.read_csv(f, sep=',')
        if f==files[0]:
            data.insert(0, "ScanType", scantype, allow_duplicates=True)
            data.insert(1, "ScanDate", scandate, allow_duplicates=True)
            data.to_csv(outfile, sep=',', index=False)
        else:
            data.insert(0, "ScanType", scantype, allow_duplicates=True)
            data.insert(1, "ScanDate", scandate, allow_duplicates=True)        
            data.to_csv(outfile, mode='a', sep=',', header=False, index=False)
        printProgressBar(tick, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    print(Style.RESET_ALL)
    print('Consolidation Complete')
def getDataFrame(file):
    data_frame = pd.read_csv(file, sep=',')
    return(data_frame)
def parsetrash(pfile):
    data = pd.read_csv(pfile, sep=',')
    data = data[data['CVSS'] > 3.9]
    data = data.sort_values(['Host', 'CVSS'], ascending=[True, False])
    data.to_csv(pfile, sep=',', index=False)
def seperatehosts(file, dir):
    data_frame = pd.read_csv(file)
    hosts = data_frame['Host'].unique()
    hostcount = countinstance(file, 'Host')
    tick=0
    printProgressBar(0, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    for h in hosts:
        tick += 1
        current = int((tick/hostcount)*100)
        current = str(current)+'%'
        result = data_frame[data_frame['Host'].str.match(h)]
        hostfile = 'results\\hosts\\' + h + '.csv'
        hostfile = os.path.join(dir, hostfile)
        result.to_csv(hostfile, sep=',', index=False)
        parsetrash(hostfile)
        # Update Progress Bar
        printProgressBar(tick, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    print(Style.RESET_ALL)
    print('Hosts have been seperated into individual files.')
    return(hosts)
    #end of original function
def countinstance(file, field):
    import pandas as pd
    data_frame = pd.read_csv(file)
    hosts = data_frame[field].unique()
    hostcount = len(hosts)
    return (hostcount)
def getlastmonth():
    import datetime
    today=datetime.date.today()
    month = int(today.strftime("%m"))-1
    month = str(month).zfill(2)
    scandate= ''.join([str(today.strftime("%Y-")),month])
    return(scandate)
def summary(data_frame,summaryfile):
    hostlist = data_frame['Host'].unique()
    hostcount = len(hostlist)
    hostSummary = []
    tick=0
    print('Calculating severities and risk score ...')
    printProgressBar(0, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    # Get Criticalities and calculate risk scores
    for h in hostlist:
        tick += 1
        hostresult = data_frame[data_frame['Host'].str.match(h)]
        critresult = hostresult[hostresult['Risk'].str.match('Critical')]
        count_crit = critresult['Risk'].count()
        critresult = hostresult[hostresult['Risk'].str.match('High')]
        count_high = critresult['Risk'].count()
        critresult = hostresult[hostresult['Risk'].str.match('Medium')]
        count_med = critresult['Risk'].count()
        riskScore = ((count_crit)+(count_high/10)+(count_med/100))
        hostSummary.append([h, count_crit, count_high, count_med,riskScore])
        printProgressBar(tick, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    print('Calculations complete.')
    # Write summary to file
    print('Writing summary to file ...')
    tick = 0
    printProgressBar(0, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    for h in hostSummary:
        tick += 1
        pd.DataFrame(hostSummary).to_csv(summaryfile, sep=',', header=['Host','Critical','High','Medium','RiskScore'], index=False)
        printProgressBar(tick, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    hostSummary = getDataFrame(summaryfile)
    print('Sorting by risk score and rewriting file ... ')
    hostSummary = hostSummary.sort_values(by=['RiskScore'], ascending=False)
    tick = 0
    printProgressBar(0, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
    for h in hostSummary:
        hostcount = len(hostSummary)
        tick += 1
        pd.DataFrame(hostSummary).to_csv(summaryfile, sep=',', index=False)
        printProgressBar(tick, hostcount, prefix = 'Progress:', suffix = 'Complete', length = 50)
def showlist(array):
    for e in array:
        print('\t', e)
def write_to_file(array, outfile):
    try:
        pd.DataFrame(array).to_csv(outfile, index=False)
    except:
        print(Fore.RED + 'Could not write to ',outfile, ': Access Denied.' + Style.RESET_ALL)
        if not input('Try again? (y/n)') == 'y': return
        write_to_file(array, outfile)
        
def printProgressBar (iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = 'â–ˆ'):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
    """
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = '\r')
    # Print New Line on Complete
    if iteration == total: 
        print()